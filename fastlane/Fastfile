before_all do
  Dotenv.overload '.env'

  bundle_install
end

desc "Update project dependencies"
lane :update_dependencies do |options|
  sh("git checkout " + options[:git_branch])
  git_pull
  yarn(
    command: "install",
    package_path: "#{ENV['PROJECT_DIR']}/package.json"
  )
end

desc "Upload build to installr"
lane :upload_installr do |options|
  notes = options[:notes] || "Build from Fastlane"
  installr(
      api_token: ENV['INSTALLR_TOKEN'],
      ipa: options[:file],
      notes: notes,
      notify: "true"
    )
end

desc "Commit changes to repo"
lane :sync_git do |options|
  git_add(path: "#{ENV['PROJECT_DIR']}/*")
  git_commit(path: "#{ENV['PROJECT_DIR']}/*", message: options[:message])
  push_to_git_remote
end

ios_project_path = "#{ENV['PROJECT_DIR']}/ios"
xcodeproj = "#{ios_project_path}/edular.xcodeproj"

desc 'Process build'
lane :process_build do |options| 
  update_dependencies(
    git_branch: options[:branch],
  )
  cocoapods(
    podfile: "#{ios_project_path}/Podfile", 
    use_bundle_exec: true,
    try_repo_update_on_error: true,
  )
  update_project_team( # Set the right team on your project
    path: xcodeproj,
    teamid: ENV['APPLE_TEAM_ID'],
    targets: ["anu", "AnuNotificationServiceExtension"]
  )
  update_project_provisioning(
    xcodeproj: xcodeproj,
    profile: options[:profile],
    target_filter: "anu", # matches name or type of a target
    build_configuration: "Release",
  )
  update_project_provisioning(
    xcodeproj: xcodeproj,
    profile: options[:profile_notification],
    target_filter: "AnuNotificationServiceExtension",
    build_configuration: "Release",
  )
  build_app(
    workspace: "#{ios_project_path}/edular.xcworkspace",
    clean: true,
    scheme: options[:scheme],
    export_method: options[:export_method],
    output_name: options[:output_name],
    include_symbols: true,
    include_bitcode: true,
    skip_profile_detection: true,
    build_path: "#{ENV['PROJECT_DIR']}/fastlane/builds",
    output_directory: "#{ENV['PROJECT_DIR']}/fastlane/builds"
  )
  if options[:installr]
    file = Actions.lane_context[SharedValues::IPA_OUTPUT_PATH]
    upload_installr(
      file: file,
      notes: options[:scheme]
    )
  end
end

desc "Process staging build"
lane :process_staging_build do |options|
  app_id = ENV['APP_IDENTIFIER_STAGING'] || ENV['APP_IDENTIFIER'] + ".staging"
  app_name = ENV['APP_NAME_STAGING'] || ENV['APP_NAME']
  match(
    app_identifier: [app_id, "#{app_id}.AnuNotificationServiceExtension"],
    type: 'adhoc',
    username: ENV['APPLE_ID'],
    team_id: ENV['APPLE_TEAM_ID'],
    git_branch: ENV['CLIENT'],
    force_for_new_devices: true,
  )
  process_build(
    branch: options[:branch],
    installr: options[:installr],
    scheme: "#{ENV['CLIENT']} staging",
    output_name: app_name,
    export_method: "ad-hoc",
    profile: ENV["sigh_#{app_id}_adhoc_profile-path"],
    profile_notification: ENV["sigh_#{app_id}.AnuNotificationServiceExtension_adhoc_profile-path"]
  )
  sync_git(
    message: "chore: staging build"
  )
end

desc "Process adhoc build"
lane :process_adhoc_build do |options|
  match(
    app_identifier: [ENV['APP_IDENTIFIER'], "#{ENV['APP_IDENTIFIER']}.AnuNotificationServiceExtension"],
    type: 'adhoc',
    username: ENV['APPLE_ID'],
    team_id: ENV['APPLE_TEAM_ID'],
    git_branch: ENV['CLIENT'],
    force_for_new_devices: true,
  )
  process_build(
    branch: options[:branch],
    installr: options[:installr],
    scheme: "#{ENV['CLIENT']} prod",
    output_name: ENV['APP_NAME'],
    export_method: "ad-hoc",
    profile: ENV["sigh_#{ENV['APP_IDENTIFIER']}_adhoc_profile-path"],
    profile_notification: ENV["sigh_#{ENV['APP_IDENTIFIER']}.AnuNotificationServiceExtension_adhoc_profile-path"]
  )
  sync_git(
    message: "chore: adhoc build"
  )
end

desc "Process prod build"
lane :process_prod_build do |options|
  build_number = options[:build_number]
  puts options
  if build_number.nil?
    UI.message "Don't specify build number. Getting latest build number from testflight"
    latest_build = 0
    begin
      latest_build = latest_testflight_build_number(
        username: ENV['APPLE_ID'],
        # team_id: "119976767", #ENV['APPLE_TEAM_ID'],
        app_identifier: ENV['APP_IDENTIFIER']
      )
    rescue => ex
      UI.error "latest_testflight_build_number got error #{ex}. Trying to get build number from plist"
      latest_build = get_build_number_from_plist(
        xcodeproj: xcodeproj,
        target: 'anu',
      ).to_i
      UI.message "Build number in plist: #{latest_build}"
    end
    build_number = latest_build + 1
  end
  increment_version_number_in_plist(
    xcodeproj: xcodeproj,
    version_number: options[:version_number], # Set a specific version number
    target: 'anu'
  )
  increment_version_number_in_plist(
    xcodeproj: xcodeproj,
    version_number: options[:version_number], # Set a specific version number
    target: 'AnuNotificationServiceExtension'
  )
  increment_build_number_in_plist(
    xcodeproj: xcodeproj,
    build_number: build_number.to_s,
    target: 'anu'
  )
  increment_build_number_in_plist(
    xcodeproj: xcodeproj,
    build_number: build_number.to_s,
    target: 'AnuNotificationServiceExtension'
  )
  match(
    app_identifier: [ENV['APP_IDENTIFIER'], "#{ENV['APP_IDENTIFIER']}.AnuNotificationServiceExtension"],
    type: 'appstore',
    username: ENV['APPLE_ID'],
    team_id: ENV['APPLE_TEAM_ID'],
    git_branch: ENV['CLIENT']
  )
  process_build(
    branch: options[:branch],
    installr: options[:installr],
    scheme: "#{ENV['CLIENT']} prod",
    output_name: ENV['APP_NAME'],
    export_method: "app-store",
    profile: ENV["sigh_#{ENV['APP_IDENTIFIER']}_adhoc_profile-path"],
    profile_notification: ENV["sigh_#{ENV['APP_IDENTIFIER']}.AnuNotificationServiceExtension_adhoc_profile-path"]
  )
  upload_to_testflight(
    username: ENV['APPLE_ID'],
    app_identifier: ENV['APP_IDENTIFIER'],
    skip_waiting_for_build_processing: true,
  )
  sync_git(
    message: "chore: production build"
  )
end


desc "Process android build"
lane :process_android_build do |options|
  update_dependencies(
    git_branch: options[:branch]
  )
  gradle(
    task: 'assemble',
    flavor: options[:flavor],
    build_type: options[:build_type],
    project_dir: "#{ENV['PROJECT_DIR']}/android",
    properties: options[:properties]
  )
  if options[:installr]
    file = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    upload_installr(
      file: file,
      notes: options[:notes] || "Fastlane build"
    )
  end
end

platform :ios do
  desc "Prepare staging build"
  lane :staging do |options|
    process_staging_build(
      branch: options[:branch],
      installr: options[:installr],
    )
  end

  desc "Prepare adhoc build"
  lane :adhoc do |options|
    process_adhoc_build(
      branch: options[:branch],
      installr: options[:installr],
    )
  end

  desc "Push a new beta build to TestFlight"
  lane :prod do |options|
    process_prod_build(
      branch: options[:branch],
      installr: options[:installr],
      version_number: options[:version_number],
      build_number: options[:build_number]
    )
  end
end

platform :android do
  desc "Process Staging build"
  lane :staging do |options|
    flavor = ENV["FLAVOR_STAGING"] || ENV["FLAVOR"]
    build_type = ENV["BUILD_TYPE_STAGING"] || ENV["BUILD_TYPE"]
    process_android_build(
      branch: options[:branch],
      installr: options[:installr],
      flavor: flavor,
      build_type: build_type
    )
  end

  desc "Process Adhoc build"
  lane :adhoc do
    process_android_build(
      branch: options[:branch],
      installr: options[:installr],
      flavor: ENV["FLAVOR"],
      build_type: ENV["BUILD_TYPE"],
    )
  end

  desc "Process Prod build"
  lane :prod do |options|
    process_android_build(
      branch: options[:branch],
      installr: options[:installr],
      flavor: ENV["FLAVOR"],
      build_type: ENV["BUILD_TYPE"],
      properties: {
        "versionCode" => options[:build_number],
        "versionName" => options[:version_number]
      }
    )
    upload_to_play_store(
      track: 'internal',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
    )
  end

  desc "Update Store Listing"
  lane :store_listing do |options|
    metadata = options[:metadata] || false
    changelogs = options[:changelogs] || false
    images = options[:images] || false
    screenshots = options[:screenshots] || false
    UI.message "Update Store Listing with metadata:#{metadata} changelogs:#{changelogs} images:#{images} screenshots:#{screenshots}"
    upload_to_play_store(
      skip_upload_apk: true,
      skip_upload_aab: true,
      skip_upload_metadata: !metadata,
      skip_upload_changelogs: !changelogs,
      skip_upload_images: !images,
      skip_upload_screenshots: !screenshots ,
    )
  end
end