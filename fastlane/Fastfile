require_relative "./version.rb"
require 'json'
require "fileutils"

desc "Send discord message"
lane :send_message do |options| 
  if ENV['DISCORD_WEBHOOK_URL']
    discord_notification(
      webhook_url: ENV['DISCORD_WEBHOOK_URL'],
      mention_users: options[:mention_users],
      content: options[:content],
      embeds: [{
        title: options[:title],
        description: options[:description],
        color: options[:color],
        fields: options[:fields],
        thumbnail_url: ENV['DISCORD_THUMBNAIL_URL'],
      }]
    )
  end
end

lane :test_message do
  send_message(
    content: 'Test',
    title: 'Test Title',
    description: 'Test description',
    fields: [{
      name: "Version",
      value: "1.0.0 (1)",
      inline: true,
    }, {
      name: "Environment",
      value: "Test",
      inline: true,
    }],
  )
end

desc "Commit changes to repo"
private_lane :sync_git do |options|
  begin
    git_add(path: "#{ENV['PROJECT_DIR']}/*")
    git_commit(
      path: "#{ENV['PROJECT_DIR']}/*",
      message: options[:message],
      allow_nothing_to_commit: true
    )
    git_pull(rebase: true)
    push_to_git_remote
  rescue => ex
    puts ex.message
  end
end

platform :ios do
  ios_project_path = "#{ENV['PROJECT_DIR']}/ios"
  xcodeproj = "#{ios_project_path}/#{ENV['XCODEPROJ_NAME']}.xcodeproj"

  def get_ios_version(increment = "patch")
    begin 
      latest_testflight_build_number(
        username: ENV['APPLE_ID'],
        team_id: ENV['ITC_TEAM_ID'],
        app_identifier: ENV['APP_IDENTIFIER'],
      )
      app_store_build_number(
        username: ENV['APPLE_ID'],
        team_id: ENV['ITC_TEAM_ID'],
        app_identifier: ENV['APP_IDENTIFIER'],
      )
    rescue => exception
      puts exception
    end
    tf_version = Actions.lane_context[SharedValues::LATEST_TESTFLIGHT_VERSION] || "1.0.0"
    store_version = Actions.lane_context[SharedValues::LATEST_VERSION] || "1.0.0"
    puts "TF Version #{tf_version}"
    puts "Store Version #{store_version}"
    next_v = next_version(store_version, increment)
    if Gem::Version.new(tf_version) >= Gem::Version.new(next_v)
        tf_build_number = Actions.lane_context[SharedValues::LATEST_TESTFLIGHT_BUILD_NUMBER] || 1
        store_build_number = Actions.lane_context[SharedValues::LATEST_BUILD_NUMBER] || 1
        puts "TF build number #{tf_build_number}"
        puts "Store build number #{store_build_number}"
        if tf_build_number == store_build_number 
          next_v = next_version(tf_version, 'patch')
        else
          next_v = tf_version
        end
    end
    puts "Next Version #{next_v}"
    return next_v
  end

  def ensure_temp_keychain(name)
    delete_keychain(
      name: name
    ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
    create_keychain(
      name: name,
      password: 'rnbuilder',
      unlock: true,
      timeout: 3600
    )
  end

  before_all do
    ensure_temp_keychain "rnbuilder"
  end

  desc 'Process build'
  private_lane :process_build do |options|
    puts "Process build with options: #{options}"

    update_project_provisioning(
      xcodeproj: xcodeproj,
      profile: options[:profile],
      build_configuration: "Release",
    )
    if ENV['SERVICE_EXTENSION_NAME']
      update_project_provisioning(
        xcodeproj: xcodeproj,
        profile: options[:profile_service_extension],
        target_filter: ENV['SERVICE_EXTENSION_NAME'],
        build_configuration: "Release",
      )
    end
    build_app(
      workspace: "#{ios_project_path}/#{ENV['XCODEPROJ_NAME']}.xcworkspace",
      clean: true,
      scheme: options[:scheme],
      export_method: options[:export_method],
      output_name: options[:output_name],
      include_symbols: true,
      include_bitcode: ENV['INCLUDE_BITCODE'] == 'true',
      skip_profile_detection: true,
      build_path: "#{ENV['PROJECT_DIR']}/fastlane/builds",
      output_directory: "#{ENV['PROJECT_DIR']}/fastlane/builds"
    )
  end

  desc "Process build"
  lane :build do |options|
    puts "Start iOS build #{options}"
    version = options[:distribute] == 'store' ? get_ios_version(options[:version]) : nil
    platform_version = write_json_version(options[:json_file], options[:client], 'ios', version)
    sync_git(
      message: "bump version #{options[:client]} #{platform_version["version"]} (#{platform_version["build"]}) - ios"
    )
    grouping = options[:client].nil? ? options[:env] : "#{options[:client]}-#{options[:env]}"
    # add_git_tag(
    #   grouping: grouping,
    #   prefix: 'v',
    #   build_number: platform_version["build"]
    # )
    send_message(
      title: "#{ENV['CLIENT']} ios - #{options[:env]}",
      description: "Start building...",
      color: "#282C34",
      fields: [{
        name: "Version",
        value: "#{platform_version["version"]} (#{platform_version["build"]})",
        inline: true,
      }, {
        name: "Environment",
        value: options[:env],
        inline: true,
      }],
    )
    app_id = ENV['APP_IDENTIFIER']
    app_name = ENV['APP_NAME']
    app_identifier = [app_id]
    export_method = options[:distribute] == 'store' ? 'app-store' : 'ad-hoc'
    match_type = options[:distribute] == 'store' ? 'appstore' : 'adhoc'
    if ENV['SERVICE_EXTENSION_NAME']
      app_identifier = app_identifier.push("#{app_id}.#{ENV['SERVICE_EXTENSION_NAME']}")
    end
    match(
      app_identifier: app_identifier,
      type: match_type,
      username: ENV['APPLE_ID'],
      team_id: ENV['APPLE_TEAM_ID'],
      git_url: ENV['MATCH_GIT_URL'],
      git_branch: ENV['CLIENT'],
      force_for_new_devices: true,
      readonly: ENV['MATCH_READONLY'] || is_ci,
      keychain_name: 'rnbuilder',
      keychain_password: 'rnbuilder',
    )
    process_build(
      scheme: ENV['XCODEPROJ_SCHEME'],
      output_name: app_name,
      export_method: export_method,
      profile: ENV["sigh_#{app_id}_#{match_type}_profile-path"],
      profile_service_extension: ENV["sigh_#{app_id}.#{ENV['SERVICE_EXTENSION_NAME']}_#{match_type}_profile-path"]
    )
    file = Actions.lane_context[SharedValues::IPA_OUTPUT_PATH]
    if options[:installr]
      upload_installr(
        file: file,
        notes: options[:scheme],
        testers: options[:testersIos]
      )
    end
    if options[:firebase]
      upload_firebase(
        app: ENV['FIREBASE_IOS_APP'],
        service_credentials_file: ENV['FIREBASE_SERVICE_ACCOUNT_FILE'],
        file: file,
        notes: options[:notes] || "Fastlane build",
        testers: options[:testersIos],
        groups: options[:groupsIos],
      )
    end
    if options[:distribute] == 'store'
      upload_to_app_store(
        username: ENV['APPLE_ID'],
        app_identifier: ENV['APP_IDENTIFIER'],
        team_id: ENV['ITC_TEAM_ID'],
        submit_for_review: false,
        skip_screenshots: true,
        skip_metadata: true,
        run_precheck_before_submit: false,
      )
    end
    send_message(
      title: "#{ENV['CLIENT']} ios",
      description: "Success ✅",
      fields: [{
        name: "Version",
        value: "#{platform_version["version"]} (#{platform_version["build"]})",
        inline: true,
      }, {
        name: "Environment",
        value: options[:env],
        inline: true,
      }],
      color: '#00C40F',
      mention_users: ENV['DISCORD_MENTION_USERS'],
    )
    reset_git_repo(force: true, skip_clean: true)
  end

  desc "Submit for review"
  lane :submit_review do |options|
    upload_to_app_store(
      username: ENV['APPLE_ID'],
      app_identifier: ENV['APP_IDENTIFIER'],
      team_id: ENV['ITC_TEAM_ID'],
      submit_for_review: true,
      automatic_release: true,
      skip_screenshots: true,
      skip_metadata: false,
      skip_binary_upload: true,
      force: true,
      app_version: options[:app_version],
      build_number: options[:build_number],
      release_notes: {
        'default' => 'Bug fixes and performance improvements',
        'en-US' => 'Bug fixes and performance improvements'
      },
      run_precheck_before_submit: false,
      reject_if_possible: true,
      submission_information: {
        add_id_info_uses_idfa: false,
        add_id_info_serves_ads: false,
        add_id_info_tracks_install: false,
        add_id_info_tracks_action: false,
        add_id_info_limits_tracking: false,
        export_compliance_uses_encryption: false
      }
    )
    send_message(
      title: "#{ENV['CLIENT']} ios",
      description: "Submitted for review ✅",
      fields: [{
        name: "Version",
        value: "#{options[:app_version]} (#{options[:build_number]})",
        inline: true,
      }],
      color: '#00C40F',
      mention_users: ENV['DISCORD_MENTION_USERS'],
    )
  end

  error do |lane, exception|
    puts exception
    send_message(
      title: "#{ENV['CLIENT']} ios",
      description: "Failure ❌ #{exception}",
      color: '#E70000',
      mention_users: ENV['DISCORD_MENTION_USERS'],
    )
  end
end

platform :android do
  def get_android_version(increment = "patch", local_version)
    new_version = local_version
    begin
      prod_version = google_play_track_release_names(
          json_key: ENV["JSON_KEY_FILE"],
          package_name: ENV["APP_IDENTIFIER_ANDROID"] || ENV["APP_IDENTIFIER"],
          track: 'production'
      )
      internal_version = google_play_track_release_names(
          json_key: ENV["JSON_KEY_FILE"],
          package_name: ENV["APP_IDENTIFIER_ANDROID"] || ENV["APP_IDENTIFIER"],
          track: 'internal'
      )
      version = prod_version.first
      if version?.include? "("
        version = local_version
      end
      new_version = next_version(version, increment)
      puts prod_version
      puts internal_version
      puts new_version
      if Gem::Version.new(internal_version.first.to_s) > Gem::Version.new(new_version.to_s)
          new_version = internal_version.first
      end
    rescue => exception
      puts exception
      new_version = next_version(local_version, increment)
    end
    # new_version = prompt(text: "Can't get latest version from store. Please specify next version (e.g: 2.2.3)")
    return new_version
  end

  desc "Process android build"
  private_lane :process_android_build do |options|
    gradle(
      task: options[:task],
      flavor: options[:flavor],
      build_type: options[:build_type],
      project_dir: "#{ENV['PROJECT_DIR']}/android",
      properties: options[:properties]
    )
  end

  desc "Process build"
  lane :build do |options|
    puts "Start android build #{options}"
    flavor = ENV["FLAVOR"]
    build_type = ENV["BUILD_TYPE"]
    local_version = get_local_version(options[:json_file], options[:client], 'android')
    version = local_version["version"]
    if options[:distribute] == 'store' 
      version = get_android_version(options[:version], local_version['version'])
    end
    platform_version = write_json_version(options[:json_file], options[:client], 'android', version)
    sync_git(
      message: "bump version #{options[:client]} #{platform_version["version"]} (#{platform_version["build"]}) - android"
    )
    grouping = options[:client].nil? ? options[:env] : "#{options[:client]}-#{options[:env]}"
    # add_git_tag(
    #   grouping: grouping,
    #   prefix: 'v',
    #   build_number: platform_version["build"]
    # )
    send_message(
      title: "#{ENV['CLIENT']} android - #{options[:env]}",
      description: "Start building...",
      color: "#282C34",
      fields: [{
        name: "Version",
        value: "#{platform_version["version"]} (#{platform_version["build"]})",
        inline: true,
      }, {
        name: "Environment",
        value: options[:env],
        inline: true,
      }],
    )
    process_android_build(
      flavor: flavor,
      build_type: build_type,
      task: options[:distribute] == 'store' ? 'bundle' : 'assemble',
    )
    file = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    if options[:installr]
      upload_installr(
        file: file,
        notes: options[:notes] || "Fastlane build",
        testers: options[:testersAndroid]
      )
    end
    if options[:firebase]
      upload_firebase(
        app: ENV['FIREBASE_ANDROID_APP'],
        service_credentials_file: ENV['FIREBASE_SERVICE_ACCOUNT_FILE'],
        file: file,
        notes: options[:notes] || "Fastlane build",
        testers: options[:testersAndroid],
        groups: options[:groupsAndroid],
      )
    end
    if options[:distribute] == 'store'
      upload_to_play_store(
        track: 'production',
        release_status: ENV['RELEASE_STATUS'] || 'completed',
        skip_upload_changelogs: false,
        skip_upload_apk: true,
        skip_upload_metadata: true,
        skip_upload_images: true,
        skip_upload_screenshots: true,
        package_name: ENV["APP_IDENTIFIER_ANDROID"] || ENV["APP_IDENTIFIER"],
        json_key: ENV["JSON_KEY_FILE"]
      )
    end
    send_message(
      title: "#{ENV['CLIENT']} android",
      description: "Success ✅",
      color: '#00C40F',
      mention_users: ENV['DISCORD_MENTION_USERS'],
      fields: [{
        name: "Version",
        value: "#{platform_version["version"]} (#{platform_version["build"]})",
        inline: true,
      }, {
        name: "Environment",
        value: options[:env],
        inline: true,
      }],
    )
    reset_git_repo(force: true, skip_clean: true)
  end

  desc "Update Store Listing"
  lane :store_listing do |options|
    metadata = options[:metadata] || false
    changelogs = options[:changelogs] || false
    images = options[:images] || false
    screenshots = options[:screenshots] || false
    UI.message "Update Store Listing with metadata:#{metadata} changelogs:#{changelogs} images:#{images} screenshots:#{screenshots}"
    upload_to_play_store(
      skip_upload_apk: true,
      skip_upload_aab: true,
      skip_upload_metadata: !metadata,
      skip_upload_changelogs: !changelogs,
      skip_upload_images: !images,
      skip_upload_screenshots: !screenshots,
      package_name: ENV["APP_IDENTIFIER"],
      json_key: ENV["JSON_KEY_FILE"]
    )
  end

  error do |lane, exception|
    puts exception
    send_message(
      title: "#{ENV['CLIENT']} android",
      description: "Failure ❌ #{exception}",
      color: '#E70000',
      mention_users: ENV['DISCORD_MENTION_USERS'],
    )
  end
end

desc "Create Onesignal certificate"
lane :sync_onesignal do |options|
  cert_path = "#{ENV['PROJECT_DIR']}/apnKeys"
  key_path = "#{cert_path}/#{ENV['CLIENT']}.p8"
  portal_client = Spaceship::Portal.login(ENV['APPLE_ID'])
  portal_client.select_team(team_id: ENV['APPLE_TEAM_ID']) if portal_client
  if !File.exist?(key_path)
    FileUtils.mkdir_p(cert_path)
    if portal_client
      service_config = {}
      service_config['U27F4V844T'] = []
      key = portal_client.create_key!(name: 'APNs', service_configs: service_config)
      file = portal_client.download_key(id: key['keyId'])
      puts key
      puts file
      File.write(key_path, file)
    end
  end
  keys = portal_client.list_keys
  apnsKey = keys.select { |key| key["keyName"] == "APNs" }
  puts apnsKey[0]  
  # setup_onesignal(
  #   auth_token: options[:auth_token],
  #   app_name: "#{ENV['CLIENT'].capitalize()} Prod",
  #   # Android setup
  #   android_token: options[:android_token],
  #   android_gcm_sender_id: options[:android_gcm_sender_id],
  #   # iOS setup
  #   apns_key_id: apnsKey[0]["keyId"].to_s,
  #   apns_team_id: ENV["APPLE_TEAM_ID"],
  #   apns_bundle_id: ENV["APP_IDENTIFIER"],
  #   # apns_p8: "TUlHVEFnRUFNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQkhrd2R3SUJBUVFnTEJMUnMrQXhwVmUxejducQo2T1VYQjVKd1lGVEN6U25UcjhmbnM2WTRPMzJnQ2dZSUtvWkl6ajBEQVFlaFJBTkNBQVJjL2MwODUrZGh5eXk2CnVEc0JOOXQ4YW41M2xlV2VWOUNrUzdWSFlMcmk4Q0l4ZUd3c0oyZTRhWUxKWjFMMGZySEZVamsrTGlOVnBxOHcKaFcva2JyNXI="
  #   apns_p8: Base64.encode64(File.read(key_path).to_s),    
  # )
end

tester_udids_file = "tester_udids.txt"

desc "Sync devices"
lane :sync_udids do
  firebase_app_distribution_get_udids(
    app: ENV['FIREBASE_IOS_APP'],
    output_file: tester_udids_file,
    service_credentials_file: ENV['FIREBASE_SERVICE_ACCOUNT_FILE'],
  )
  register_devices(
    devices_file: tester_udids_file,
    username: ENV['APPLE_ID'],
    team_id: ENV['APPLE_TEAM_ID'],
  )
  sync_git(
    message: 'registered tester devices'
  )
end

desc "Upload build to firebase"
lane :upload_firebase do |options|
  puts Dir.pwd
  puts options
  notes = options[:notes] || "Build from Fastlane"
  firebase_app_distribution(
    app: options[:app],
    ipa_path: options[:file],
    android_artifact_type: "APK",
    android_artifact_path: options[:file],
    service_credentials_file: options[:service_credentials_file],
    testers: options[:testers],
    groups: options[:groups],
    release_notes: notes,
    debug: true,
  )
end

def inviteTesters(appId, token, testers)
  require 'net/http'
  require 'uri'

  puts "appId: #{appId}, token: #{token}, testers: #{testers}"
  uri = URI.parse("https://www.installrapp.com/apps/#{appId}/builds/latest/team.json")
  res = Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|
    req = Net::HTTP::Post.new(uri)
    req['X-InstallrAppToken'] = token
    req.set_form_data({
      "notify" => testers
    }, ";")
    http.request(req)
  end
  puts res.body
  case res
  when Net::HTTPSuccess, Net::HTTPRedirection
    UI.success("Invite testers successfully")
  else
    res.error!
  end
end

desc "Upload build to installr"
lane :upload_installr do |options|
  notes = options[:notes] || "Build from Fastlane"
  installr(
    api_token: ENV['INSTALLR_TOKEN'],
    ipa: options[:file],
    notes: notes,
    notify: "true",
  )
  buildInfo = Actions.lane_context[SharedValues::INSTALLR_BUILD_INFORMATION]
  id = buildInfo["appData"]["id"]
  # id = 37106
  UI.success("Invite testers for app #{id}")
  inviteTesters(
    id,
    ENV['INSTALLR_TOKEN'],
    options[:testers]
  )
end

lane :get_team_names do |options|
  require "spaceship"
  client_tunes = Spaceship::Tunes.login(options[:id], options[:password])
  client = Spaceship::Portal.login(options[:id], options[:password])

  search = options[:search].downcase

  str_dev_portal = "" 
  UI.message "---- Developer teams for #{search} ----"
  client.teams.each do |team|
    teamName = team['name'].downcase
    if teamName.include? search
      UI.message "#{team['name']} (#{team['teamId']})"
      str_dev_portal << "#{team['name']} (#{team['teamId']})||"
    end
  end

  str_client_tunes = "" 
  UI.message "---- Appstore Connect teams for #{search} ----"
  client_tunes.teams.each do |team|
    teamName = team['name'].downcase
    # puts teamName
    if teamName.include? search
      UI.message "#{team['name']} (#{team['providerId']})"
      str_client_tunes << "#{team['name']} (#{team['providerId']})||"
    end
  end
end

lane :match_check do |options|
  begin
    puts "Running match check for #{ENV['CLIENT']}"
    match(
      app_identifier: ENV['APP_IDENTIFIER'],
      type: 'appstore',
      username: ENV['APPLE_ID'],
      team_id: ENV['APPLE_TEAM_ID'],
      git_url: ENV['MATCH_GIT_URL'],
      git_branch: ENV['CLIENT'],
      force_for_new_devices: true,
      readonly: ENV['MATCH_READONLY'] || is_ci,
      keychain_name: 'rnbuilder',
      keychain_password: 'rnbuilder',
    )
    send_message(
      title: "#{ENV['CLIENT']}",
      description: "Apple account is ready",
      color: '#00C40F',
      mention_users: ENV['DISCORD_MENTION_USERS'],
    )
  rescue => ex
    send_message(
      title: "#{ENV['CLIENT']}",
      description: ex.message,
      color: '#E70000',
      mention_users: ENV['DISCORD_MENTION_USERS'],
    )
  end
end

lane :check_version do |options|
  begin
    puts "Check current version for #{ENV['CLIENT']}"
    app_store_build_number(
      username: ENV['APPLE_ID'],
      team_id: ENV['ITC_TEAM_ID'],
      app_identifier: ENV['APP_IDENTIFIER'],
    )
    store_version = Actions.lane_context[SharedValues::LATEST_VERSION]
    local_version = get_local_version(options[:json_file], ENV['CLIENT'], 'ios')
    is_same = store_version == local_version['version']
    puts "iOS Store version: #{store_version}, Local version: #{local_version['version']}"
    send_message(
      title: "#{ENV['CLIENT']}",
      description: "iOS\nStore version: #{store_version}\nLocal version: #{local_version['version']}",
      color: is_same ? '#00C40F' : '#E70000',
      mention_users: ENV['DISCORD_MENTION_USERS'],
    )

    prod_version = google_play_track_release_names(
      json_key: ENV["JSON_KEY_FILE"],
      package_name: ENV["APP_IDENTIFIER_ANDROID"] || ENV["APP_IDENTIFIER"],
      track: 'production'
    )
    android_local_version = get_local_version(options[:json_file], ENV['CLIENT'], 'android')
    is_android_same = prod_version.first == android_local_version['version']
    puts "Android Store version: #{prod_version.first}, Local version: #{android_local_version['version']}"
    send_message(
      title: "#{ENV['CLIENT']}",
      description: "Android\nStore version: #{prod_version.first}\nLocal version: #{android_local_version['version']}",
      color: is_android_same ? '#00C40F' : '#E70000',
      mention_users: ENV['DISCORD_MENTION_USERS'],
    )
  rescue => ex
    send_message(
      title: "#{ENV['CLIENT']}",
      description: ex.message,
      color: '#E70000',
      mention_users: ENV['DISCORD_MENTION_USERS'],
    )
  end
end

lane :google_key do |options|
  begin
    puts "Running google key check for #{ENV['CLIENT']}"
    prod_version = google_play_track_release_names(
      json_key: ENV["JSON_KEY_FILE"],
      package_name: ENV["APP_IDENTIFIER_ANDROID"] || ENV["APP_IDENTIFIER"],
      track: 'production'
    )
    puts "Prod version #{prod_version}"
    send_message(
      title: "#{ENV['CLIENT']}",
      description: "Google key is ready",
      color: '#00C40F',
      mention_users: ENV['DISCORD_MENTION_USERS'],
    )
  rescue => ex
    send_message(
      title: "#{ENV['CLIENT']}",
      description: ex.message,
      color: '#E70000',
      mention_users: ENV['DISCORD_MENTION_USERS'],
    )
  end
end
