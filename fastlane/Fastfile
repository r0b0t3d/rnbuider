tester_udids_file = "tester_udids.txt"

desc "Upload build to installr"
lane :sync_udids do
  firebase_app_distribution_get_udids(
    app: ENV['FIREBASE_IOS_APP'],
    output_file: tester_udids_file,
    service_credentials_file: ENV['FIREBASE_SERVICE_ACCOUNT_FILE'],
  )
  register_devices(
    devices_file: tester_udids_file,
    username: ENV['APPLE_ID'],
    team_id: ENV['APPLE_TEAM_ID'],
  )
end

desc "Upload build to firebase"
lane :upload_firebase do |options|
  puts Dir.pwd
  puts options
  notes = options[:notes] || "Build from Fastlane"
  firebase_app_distribution(
    app: options[:app],
    ipa_path: options[:file],
    android_artifact_type: "APK",
    android_artifact_path: options[:file],
    service_credentials_file: options[:service_credentials_file],
    testers: options[:testers],
    groups: options[:groups],
    release_notes: notes,
    debug: true,
  )
end

desc "Update project dependencies"
private_lane :update_dependencies do |options|
  yarn(
    command: "install",
    package_path: "#{ENV['PROJECT_DIR']}/package.json"
  )
end

private_lane :clean_up() do |options|
  reset_git_repo(
    skip_clean: true
  )
end

def inviteTesters(appId, token, testers)
  require 'net/http'
  require 'uri'

  puts "appId: #{appId}, token: #{token}, testers: #{testers}"
  uri = URI.parse("https://www.installrapp.com/apps/#{appId}/builds/latest/team.json")
  res = Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|
    req = Net::HTTP::Post.new(uri)
    req['X-InstallrAppToken'] = token
    req.set_form_data({
      "notify" => testers
    }, ";")
    http.request(req)
  end
  puts res.body
  case res
  when Net::HTTPSuccess, Net::HTTPRedirection
    UI.success("Invite testers successfully")
  else
    res.error!
  end
end

desc "Upload build to installr"
lane :upload_installr do |options|
  notes = options[:notes] || "Build from Fastlane"
  installr(
    api_token: ENV['INSTALLR_TOKEN'],
    ipa: options[:file],
    notes: notes,
    notify: "true",
  )
  buildInfo = Actions.lane_context[SharedValues::INSTALLR_BUILD_INFORMATION]
  id = buildInfo["appData"]["id"]
  # id = 37106
  UI.success("Invite testers for app #{id}")
  inviteTesters(
    id,
    ENV['INSTALLR_TOKEN'],
    options[:testers]
  )
end

lane :get_team_names do |options|
  require "spaceship"
  puts options
  client_tunes = Spaceship::Tunes.login(options[:id], options[:password])
  client = Spaceship::Portal.login(options[:id], options[:password])

  str_client_tunes = "" 
  client_tunes.teams.each do |team|
      UI.message "#{team['contentProvider']['name']} (#{team['contentProvider']['contentProviderId']})"
      str_client_tunes << "#{team['contentProvider']['name']} (#{team['contentProvider']['contentProviderId']})||"
  end

  str_dev_portal = "" 
  client.teams.each do |team|
      UI.message "#{team['name']} (#{team['teamId']})"
      str_dev_portal << "#{team['name']} (#{team['teamId']})||"
  end
end

platform :ios do
  ios_project_path = "#{ENV['PROJECT_DIR']}/ios"
  xcodeproj = "#{ios_project_path}/#{ENV['XCODEPROJ_NAME']}.xcodeproj"

  def ensure_temp_keychain(name)
    delete_keychain(
      name: name
    ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
    create_keychain(
      name: name,
      password: 'rnbuilder',
      unlock: true,
      timeout: 3600
    )
  end

  before_all do
    ensure_temp_keychain "rnbuilder"
  end

  desc 'Process build'
  private_lane :process_build do |options|
    puts "Process build with options: #{options}"

    update_dependencies()
    cocoapods(
      podfile: "#{ios_project_path}/Podfile", 
      use_bundle_exec: true,
      try_repo_update_on_error: true,
    )
    # update_project_team( # Set the right team on your project
    #   path: xcodeproj,
    #   teamid: ENV['APPLE_TEAM_ID'],
    # )
    update_project_provisioning(
      xcodeproj: xcodeproj,
      profile: options[:profile],
      # target_filter: ENV['CLIENT'], # matches name or type of a target
      build_configuration: "Release",
    )
    if ENV['SERVICE_EXTENSION_NAME']
      update_project_provisioning(
        xcodeproj: xcodeproj,
        profile: options[:profile_service_extension],
        target_filter: ENV['SERVICE_EXTENSION_NAME'],
        build_configuration: "Release",
      )
    end
    build_app(
      workspace: "#{ios_project_path}/#{ENV['XCODEPROJ_NAME']}.xcworkspace",
      clean: true,
      scheme: options[:scheme],
      export_method: options[:export_method],
      output_name: options[:output_name],
      include_symbols: true,
      include_bitcode: true,
      skip_profile_detection: true,
      build_path: "#{ENV['PROJECT_DIR']}/fastlane/builds",
      output_directory: "#{ENV['PROJECT_DIR']}/fastlane/builds"
    )
  end

  desc "Process build"
  lane :build do |options|
    puts "Start building app for env #{options[:env]}"
    app_id = ENV['APP_IDENTIFIER']
    app_name = ENV['APP_NAME']
    app_identifier = [app_id]
    if ENV['SERVICE_EXTENSION_NAME']
      app_identifier = app_identifier.push("#{app_id}.#{ENV['SERVICE_EXTENSION_NAME']}")
    end
    match(
      app_identifier: app_identifier,
      type: ENV['MATCH_TYPE'],
      username: ENV['APPLE_ID'],
      team_id: ENV['APPLE_TEAM_ID'],
      git_url: ENV['MATCH_GIT_URL'],
      git_branch: ENV['CLIENT'],
      force_for_new_devices: true,
      readonly: is_ci,
      keychain_name: 'rnbuilder',
      keychain_password: 'rnbuilder',
    )
    process_build(
      testers: options[:testers],
      scheme: ENV['XCODEPROJ_SCHEME'],
      output_name: app_name,
      export_method: ENV['EXPORT_METHOD'],
      profile: ENV["sigh_#{app_id}_#{ENV['MATCH_TYPE']}_profile-path"],
      profile_service_extension: ENV["sigh_#{app_id}.#{ENV['SERVICE_EXTENSION_NAME']}_#{ENV['MATCH_TYPE']}_profile-path"]
    )
    file = Actions.lane_context[SharedValues::IPA_OUTPUT_PATH]
    if options[:installr]
      upload_installr(
        file: file,
        notes: options[:scheme],
        testers: options[:testers]
      )
    end
    if options[:firebase]
      upload_firebase(
        app: ENV['FIREBASE_IOS_APP'],
        service_credentials_file: ENV['FIREBASE_SERVICE_ACCOUNT_FILE'],
        file: file,
        notes: options[:notes] || "Fastlane build",
        testers: options[:testers],
        groups: options[:groups],
      )
    end
    if options[:env] == 'prod'
      upload_to_testflight(
        username: ENV['APPLE_ID'],
        app_identifier: ENV['APP_IDENTIFIER'],
        skip_waiting_for_build_processing: true,
        team_id: ENV['ITC_TEAM_ID']
      )
    end
    clean_up
  end
end

platform :android do
  desc "Process android build"
  private_lane :process_android_build do |options|
    update_dependencies(
      git_branch: options[:branch]
    )
    gradle(
      task: "clean",
      project_dir: "#{ENV['PROJECT_DIR']}/android",
    )
    gradle(
      task: options[:task],
      flavor: options[:flavor],
      build_type: options[:build_type],
      project_dir: "#{ENV['PROJECT_DIR']}/android",
      properties: options[:properties]
    )
  end

  desc "Process build"
  lane :build do |options|
    flavor = ENV["FLAVOR"]
    build_type = ENV["BUILD_TYPE"]
    process_android_build(
      branch: options[:branch],
      testers: options[:testers],
      flavor: flavor,
      build_type: build_type,
      task: options[:env] == 'prod' ? 'bundle' : 'assemble',
    )
    file = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    if options[:installr]
      upload_installr(
        file: file,
        notes: options[:notes] || "Fastlane build",
        testers: options[:testers]
      )
    end
    if options[:firebase]
      upload_firebase(
        app: ENV['FIREBASE_ANDROID_APP'],
        service_credentials_file: ENV['FIREBASE_SERVICE_ACCOUNT_FILE'],
        file: file,
        notes: options[:notes] || "Fastlane build",
        testers: options[:testers],
        groups: options[:groups],
      )
    end
    if options[:env] == 'prod'
      upload_to_play_store(
        track: 'internal',
        skip_upload_apk: true,
        skip_upload_metadata: true,
        skip_upload_changelogs: true,
        skip_upload_images: true,
        skip_upload_screenshots: true,
        package_name: ENV["APP_IDENTIFIER"],
        json_key: ENV["JSON_KEY_FILE"]
      )
    end
    clean_up
  end

  desc "Update Store Listing"
  lane :store_listing do |options|
    metadata = options[:metadata] || false
    changelogs = options[:changelogs] || false
    images = options[:images] || false
    screenshots = options[:screenshots] || false
    UI.message "Update Store Listing with metadata:#{metadata} changelogs:#{changelogs} images:#{images} screenshots:#{screenshots}"
    upload_to_play_store(
      skip_upload_apk: true,
      skip_upload_aab: true,
      skip_upload_metadata: !metadata,
      skip_upload_changelogs: !changelogs,
      skip_upload_images: !images,
      skip_upload_screenshots: !screenshots,
      package_name: ENV["APP_IDENTIFIER"],
      json_key: ENV["JSON_KEY_FILE"]
    )
  end
end

error do |lane, exception|
  clean_up
end